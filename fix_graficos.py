"""
Script de Corre√ß√£o dos Gr√°ficos - Onion Monitor v3
Corrige problemas com dados vazios nos gr√°ficos da p√°gina de an√°lise
"""

import sqlite3
import os
from datetime import datetime

def corrigir_graficos():
    """Corrige problemas dos gr√°ficos vazios"""
    
    print("="*60)
    print("CORRE√á√ÉO DOS GR√ÅFICOS - ONION MONITOR V3")
    print("="*60)
    
    db_path = 'onion_monitor.db'
    if not os.path.exists(db_path):
        print("‚ùå ERRO: Banco de dados n√£o encontrado!")
        return False
    
    try:
        conn = sqlite3.connect(db_path)
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()
        
        # 1. Verificar e corrigir coletas sem fonte_id
        print("\n1. VERIFICANDO COLETAS SEM FONTE_ID:")
        cursor.execute("SELECT COUNT(*) FROM coletas WHERE fonte_id IS NULL")
        sem_fonte = cursor.fetchone()[0]
        
        if sem_fonte > 0:
            print(f"   ‚ö†Ô∏è  Encontradas {sem_fonte} coletas sem fonte_id")
            
            # Verifica se existe uma fonte padr√£o
            cursor.execute("SELECT id FROM fontes WHERE nome LIKE '%Ahmia%' OR nome LIKE '%padr√£o%' ORDER BY id LIMIT 1")
            fonte_padrao = cursor.fetchone()
            
            if fonte_padrao:
                fonte_id = fonte_padrao[0]
                print(f"   üîß Definindo fonte padr√£o ID={fonte_id} para coletas √≥rf√£s...")
                
                cursor.execute("UPDATE coletas SET fonte_id = ? WHERE fonte_id IS NULL", (fonte_id,))
                conn.commit()
                
                cursor.execute("SELECT COUNT(*) FROM coletas WHERE fonte_id IS NULL")
                restantes = cursor.fetchone()[0]
                print(f"   ‚úÖ Corrigido! Restam {restantes} coletas sem fonte")
            else:
                print("   üîß Criando fonte padr√£o...")
                cursor.execute('''
                    INSERT INTO fontes (nome, url, tipo, ativo) 
                    VALUES ('Fonte Padr√£o', 'https://ahmia.fi/', 'surface', 1)
                ''')
                fonte_id = cursor.lastrowid
                
                cursor.execute("UPDATE coletas SET fonte_id = ? WHERE fonte_id IS NULL", (fonte_id,))
                conn.commit()
                print(f"   ‚úÖ Fonte padr√£o criada (ID={fonte_id}) e aplicada!")
        else:
            print("   ‚úÖ Todas as coletas possuem fonte_id")
        
        # 2. Testar as consultas dos gr√°ficos
        print("\n2. TESTANDO CONSULTAS DOS GR√ÅFICOS:")
        
        # Teste 1: Distribui√ß√£o de Valida√ß√£o
        print("\n   üìä Teste 1 - Distribui√ß√£o de Valida√ß√£o:")
        try:
            cursor.execute("""
                SELECT 
                    CASE WHEN validado = 1 THEN 'Validados' ELSE 'N√£o Validados' END as categoria,
                    COUNT(*) as quantidade
                FROM coletas
                GROUP BY CASE WHEN validado = 1 THEN 'Validados' ELSE 'N√£o Validados' END
            """)
            resultado = cursor.fetchall()
            
            if resultado:
                for row in resultado:
                    print(f"      ‚úÖ {row['categoria']}: {row['quantidade']}")
            else:
                print("      ‚ùå Resultado vazio!")
                
        except Exception as e:
            print(f"      ‚ùå Erro: {e}")
        
        # Teste 2: Coletas por Fonte
        print("\n   üìä Teste 2 - Coletas por Fonte:")
        try:
            cursor.execute('''
                SELECT f.nome as fonte_nome, COUNT(*) as quantidade
                FROM coletas c
                INNER JOIN fontes f ON c.fonte_id = f.id
                GROUP BY f.nome
                ORDER BY quantidade DESC
            ''')
            resultado = cursor.fetchall()
            
            if resultado:
                for row in resultado:
                    print(f"      ‚úÖ {row['fonte_nome']}: {row['quantidade']} coletas")
            else:
                print("      ‚ùå INNER JOIN falhou! Testando LEFT JOIN...")
                
                cursor.execute('''
                    SELECT f.nome as fonte_nome, COUNT(c.id) as quantidade
                    FROM fontes f
                    LEFT JOIN coletas c ON f.id = c.fonte_id
                    GROUP BY f.nome
                    ORDER BY quantidade DESC
                ''')
                resultado_alt = cursor.fetchall()
                
                if resultado_alt:
                    print("      ‚úÖ LEFT JOIN funcionou:")
                    for row in resultado_alt:
                        print(f"         {row['fonte_nome']}: {row['quantidade']} coletas")
                else:
                    print("      ‚ùå Ambos JOINs falharam!")
                    
        except Exception as e:
            print(f"      ‚ùå Erro: {e}")
        
        # Teste 3: Top Termos
        print("\n   üìä Teste 3 - Top Termos:")
        try:
            cursor.execute('''
                SELECT termo_busca, COUNT(*) as quantidade
                FROM coletas
                WHERE termo_busca IS NOT NULL AND termo_busca != ''
                GROUP BY termo_busca
                ORDER BY quantidade DESC
                LIMIT 5
            ''')
            resultado = cursor.fetchall()
            
            if resultado:
                for row in resultado:
                    print(f"      ‚úÖ '{row['termo_busca'][:20]}...': {row['quantidade']}")
            else:
                print("      ‚ùå Nenhum termo encontrado!")
                
        except Exception as e:
            print(f"      ‚ùå Erro: {e}")
        
        # 3. Verificar integridade referencial
        print("\n3. VERIFICANDO INTEGRIDADE REFERENCIAL:")
        
        # Encontrar coletas com fonte_id inv√°lido
        cursor.execute('''
            SELECT c.fonte_id, COUNT(*) as quantidade
            FROM coletas c
            LEFT JOIN fontes f ON c.fonte_id = f.id
            WHERE c.fonte_id IS NOT NULL AND f.id IS NULL
            GROUP BY c.fonte_id
        ''')
        referencias_quebradas = cursor.fetchall()
        
        if referencias_quebradas:
            print("   ‚ö†Ô∏è  Referencias quebradas encontradas:")
            for ref in referencias_quebradas:
                print(f"      fonte_id={ref['fonte_id']}: {ref['quantidade']} coletas")
                
            # Corrigir referencias quebradas
            for ref in referencias_quebradas:
                print(f"   üîß Corrigindo coletas com fonte_id={ref['fonte_id']}...")
                cursor.execute("UPDATE coletas SET fonte_id = 1 WHERE fonte_id = ?", (ref['fonte_id'],))
            
            conn.commit()
            print("   ‚úÖ Referencias quebradas corrigidas!")
        else:
            print("   ‚úÖ Integridade referencial OK!")
        
        # 4. Estat√≠sticas finais
        print("\n4. ESTAT√çSTICAS FINAIS:")
        cursor.execute("SELECT COUNT(*) FROM coletas")
        total = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM coletas WHERE validado = 1")
        validados = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM fontes WHERE ativo = 1")
        fontes_ativas = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(DISTINCT termo_busca) FROM coletas")
        termos_unicos = cursor.fetchone()[0]
        
        print(f"   üìä Total de coletas: {total}")
        print(f"   ‚úÖ Validados: {validados}")
        print(f"   üåê Fontes ativas: {fontes_ativas}")
        print(f"   üîç Termos √∫nicos: {termos_unicos}")
        
        conn.close()
        
        print("\n" + "="*60)
        print("CORRE√á√ÉO CONCLU√çDA COM SUCESSO!")
        print("Reinicie o Onion Monitor e teste a p√°gina de an√°lise.")
        print("="*60)
        
        return True
        
    except Exception as e:
        print(f"‚ùå ERRO: {e}")
        return False

if __name__ == "__main__":
    corrigir_graficos()